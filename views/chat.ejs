<!DOCTYPE html>
<html lang="en" class="">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat - <%= group.name %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css" id="highlight-theme">
  <style>
    body { 
      font-family: 'Inter', sans-serif; 
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    .message-bubble { animation: slideIn 0.3s ease-out forwards; }
    @keyframes slideIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    
    .message-actions {
      display: none;
      position: absolute;
      top: -1rem;
      background-color: #fff;
      border-radius: 9999px;
      padding: 0.25rem 0.5rem;
      box-shadow: 0 4px 12px -1px rgb(0 0 0 / 0.08);
      border: 1px solid #e5e7eb;
    }
    .dark .message-actions {
      background-color: #1f2937;
      border-color: #374151;
    }
    .message-content:hover .message-actions { display: flex; }
    .message-actions.self { right: 0.5rem; }
    .message-actions.other { left: 0.5rem; }

    ::-webkit-scrollbar { width: 8px; }
    ::-webkit-scrollbar-track { background: transparent; }
    ::-webkit-scrollbar-thumb { background: #d1d5db; border-radius: 4px; }
    .dark ::-webkit-scrollbar-thumb { background: #4b5563; }
    ::-webkit-scrollbar-thumb:hover { background: #9ca3af; }
    .dark ::-webkit-scrollbar-thumb:hover { background: #6b7280; }

    .sidebar { 
      width: 280px; /* Slightly reduce sidebar width */
      border-right: 1px solid #e5e7eb;
      flex-shrink: 0;
      transition: transform 0.3s ease-in-out;
    }
    .dark .sidebar { border-right-color: #374151; }
    .mobile-header, .sidebar-close-btn, .sidebar-backdrop { display: none; }
    @media (max-width: 1023px) {
      .sidebar { position: fixed; left: 0; top: 0; bottom: 0; z-index: 40; transform: translateX(-100%); background: #fff; width: 85%; max-width: 320px; }
      .dark .sidebar { background: #111827; }
      .sidebar.is-open { transform: translateX(0); }
      .sidebar-backdrop { position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); z-index: 30; }
      .sidebar-backdrop.is-open { display: block; }
      .main-chat { width: 100%; }
      .mobile-header { display: flex; }
      .sidebar-close-btn { display: block; }
      .desktop-header { display: none; }
    }
    #emoji-picker { width: 320px; max-width: 90vw; max-height: 250px; overflow-y: auto; }
    .emoji { cursor: pointer; padding: 4px; border-radius: 4px; transition: background-color 0.2s; text-align: center; font-size: 1.5rem; }
    .emoji:hover { background-color: #f3f4f6; }
    .dark .emoji:hover { background-color: #374151; }
    .code-snippet { font-size: 0.875rem; border-radius: 0.5rem; }
    
    /* File upload improvements */
    .file-item { transition: opacity 0.3s ease, transform 0.3s ease; }
    .file-item:hover { transform: translateY(-2px); }
    
    #upload-progress-bar {
      transition: width 0.3s ease-out;
      border-radius: 0 0 0.5rem 0.5rem;
    }
    
    .upload-success-animation {
      animation: bounceIn 0.5s ease-out;
    }
    
    @keyframes bounceIn {
      0% { transform: scale(0.3); opacity: 0; }
      50% { transform: scale(1.05); }
      70% { transform: scale(0.9); }
      100% { transform: scale(1); opacity: 1; }
    }
    
    .file-delete-animation {
      animation: fadeOutScale 0.3s ease-out forwards;
    }
    
    @keyframes fadeOutScale {
      0% { opacity: 1; transform: scale(1); }
      100% { opacity: 0; transform: scale(0.8); }
    }
  </style>
</head>

<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-white h-screen overflow-hidden">

  <div class="h-full flex">
      
      <!-- Sidebar -->
      <aside id="chat-sidebar" class="sidebar flex flex-col bg-white dark:bg-gray-800">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <a href="/groups" class="text-gray-600 dark:text-gray-400 hover:text-indigo-500 transition-colors"><i class="fas fa-chevron-left mr-3"></i>All Groups</a>
            <div class="sidebar-close-btn">
                <button id="close-sidebar-btn" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"><i class="fas fa-times text-2xl"></i></button>
            </div>
        </div>
        <div class="p-6 text-center border-b border-gray-200 dark:border-gray-700">
            <h1 class="text-2xl font-extrabold text-gray-900 dark:text-white"><%= group.name %></h1>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Logged in as: <%= user.username %></p>
        </div>
        <div class="px-4 py-4 border-b border-gray-200 dark:border-gray-700">
          <h2 class="font-semibold text-gray-600 dark:text-gray-300 mb-3 text-xs tracking-wider uppercase">Online Users</h2>
          <ul id="user-list" class="space-y-3 text-sm text-gray-700 dark:text-gray-300"></ul>
        </div>
        <div class="flex-grow p-4 space-y-2">
            <h2 class="font-semibold text-gray-600 dark:text-gray-300 mb-2 text-xs tracking-wider uppercase">Group Tools</h2>
            <button id="view-files-btn" class="w-full text-left text-gray-700 dark:text-gray-200 py-2.5 px-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors flex items-center font-medium"><i class="fas fa-folder-open w-6 text-center mr-3 text-gray-400"></i>View All Files</button>
            <button id="view-calendar-btn" class="w-full text-left text-gray-700 dark:text-gray-200 py-2.5 px-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors flex items-center font-medium"><i class="fas fa-calendar-alt w-6 text-center mr-3 text-gray-400"></i>Group Calendar</button>
            <button id="start-video-call-btn" class="w-full text-left text-green-600 dark:text-green-400 py-2.5 px-4 rounded-lg hover:bg-green-50 dark:hover:bg-green-900/50 transition-colors flex items-center font-medium"><i class="fas fa-video w-6 text-center mr-3"></i>Start Video Call</button>
        </div>
        <div class="p-4 border-t border-gray-200 dark:border-gray-700 space-y-3">
            <div class="relative">
              <label class="w-full text-sm bg-indigo-50 text-indigo-600 dark:bg-indigo-900/50 dark:text-indigo-300 py-2.5 px-4 rounded-lg hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors font-semibold flex items-center justify-center cursor-pointer relative overflow-hidden">
                <span id="upload-text"><i class="fas fa-paperclip mr-2"></i> Attach File</span>
                <span id="upload-progress" class="hidden"><i class="fas fa-spinner fa-spin mr-2"></i> Uploading...</span>
                <input type="file" id="file-input" name="file" class="hidden" required>
                <div id="upload-progress-bar" class="absolute bottom-0 left-0 h-1 bg-indigo-600 transition-all duration-300 ease-out" style="width: 0%"></div>
              </label>
              <div id="upload-error" class="hidden mt-2 text-red-600 dark:text-red-400 text-xs"></div>
              <div id="upload-success" class="hidden mt-2 text-green-600 dark:text-green-400 text-xs"></div>
            </div>
            <% if (userRole === 'owner' || userRole === 'admin') { %>
              <a href="/chat/<%= group.id %>/manage" class="block text-center text-sm bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 py-2.5 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors font-semibold"><i class="fas fa-users-cog mr-2"></i>Manage Group</a>
            <% } %>
            <% if (userRole !== 'owner') { %>
              <form action="/groups/leave/<%= group.id %>" method="POST" onsubmit="return confirm('Are you sure you want to leave this group permanently?');">
                  <button type="submit" class="w-full text-sm bg-red-500/10 text-red-600 dark:bg-red-500/20 dark:text-red-400 py-2.5 rounded-lg hover:bg-red-500/20 dark:hover:bg-red-500/30 transition-colors font-semibold"><i class="fas fa-sign-out-alt mr-2"></i>Leave Group</button>
              </form>
            <% } %>
        </div>
      </aside>
      <div id="sidebar-backdrop" class="sidebar-backdrop"></div>

      <!-- Video Call Container -->
      <div id="video-call-container" class="hidden absolute inset-0 bg-gray-900/80 z-50 flex-col items-center justify-center p-4">
        <h2 class="text-2xl font-bold text-white mb-4">Group Video Call</h2>
        <div id="video-grid" class="grid grid-cols-2 md:grid-cols-3 gap-4 w-full max-w-6xl flex-grow">
            <div class="relative">
                <video id="local-video" autoplay muted class="w-full h-full object-cover rounded-lg bg-black"></video>
                <div class="absolute bottom-2 left-2 bg-black/50 text-white text-sm px-2 py-1 rounded">You</div>
            </div>
            <!-- Remote videos will be added here -->
        </div>
        <button id="end-video-call-btn" class="mt-6 bg-red-600 text-white font-bold py-2 px-6 rounded-full hover:bg-red-700 transition-colors">End Call</button>
      </div>

      <!-- Main Chat Area -->
      <main class="main-chat flex flex-col flex-grow bg-gray-100 dark:bg-gray-900">
        <header class="flex justify-between items-center p-3 sm:p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 flex-shrink-0">
          <div class="flex items-center">
            <button id="sidebar-toggle-btn" class="text-gray-500 dark:text-gray-300 mr-2 sm:mr-4 lg:hidden"><i class="fas fa-bars text-xl"></i></button>
            <h1 class="text-lg sm:text-xl font-bold text-gray-900 dark:text-white desktop-header truncate"><%= group.name %></h1>
          </div>
          <div class="flex items-center space-x-2 sm:space-x-4">
              <button id="theme-toggle" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none rounded-lg text-sm p-2.5">
                  <i id="theme-toggle-dark-icon" class="fas fa-moon w-5 h-5"></i>
                  <i id="theme-toggle-light-icon" class="fas fa-sun w-5 h-5 hidden"></i>
              </button>
          </div>
        </header>
        <div id="message-container" class="flex-grow overflow-y-auto p-3 sm:p-6 space-y-4 sm:space-y-6">
          <!-- Messages will be dynamically inserted here -->
          <% messages.forEach(function(message) { %>
            <div class="message-container" id="message-<%= message.id %>">
              <div class="message-bubble w-full flex <%= message.user_id == user.id ? 'justify-end' : 'justify-start' %>" data-message-id="<%= message.id %>">
                <div class="relative max-w-xs sm:max-w-md md:max-w-lg message-content">
                  <div class="rounded-2xl px-3 py-2 sm:px-4 sm:py-3 <%= message.user_id == user.id ? 'bg-indigo-600 text-white rounded-br-lg' : 'bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-bl-lg shadow-sm' %>">
                    <div class="font-bold text-sm mb-1"><%= message.username %></div>
                    <% if (message.parent_message_id) { %>
                      <div class="border-l-2 border-indigo-300 dark:border-indigo-500 pl-2 text-xs opacity-80 mb-2">
                        <strong>Replying to <%= message.parent_username %></strong>
                      </div>
                    <% } %>
                    <% if (message.is_code_snippet) { %>
                      <pre><code class="language-<%= message.language %> code-snippet"><%- message.message %></code></pre>
                    <% } else { %>
                      <p class="text-sm sm:text-base break-words"><%= message.message %></p>
                    <% } %>
                  </div>
                  <!-- Actions on Hover -->
                  <div class="message-actions gap-2 text-xs text-gray-500 dark:text-gray-400 <%= message.user_id == user.id ? 'self' : 'other' %>">
                    <button class="reply-btn hover:text-indigo-500" data-parent-id="<%= message.id %>" data-parent-username="<%= message.username %>" data-parent-message="<%= message.message %>" title="Reply"><i class="fas fa-reply"></i></button>
                    <button class="react-btn hover:text-yellow-500" title="React"><i class="fas fa-smile"></i></button>
                    <% if (message.user_id == user.id || ['owner', 'admin'].includes(userRole)) { %>
                      <button class="delete-btn hover:text-red-500" data-message-id="<%= message.id %>" title="Delete"><i class="fas fa-trash"></i></button>
                    <% } %>
                  </div>
                  <div class="flex items-center gap-2 mt-1.5 px-2 text-xs text-gray-400 dark:text-gray-500 <%= message.user_id == user.id ? 'justify-end' : '' %>">
                    <span><%= new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
                    <div class="reactions-container flex gap-1">
                      <% reactions.filter(r => r.message_id === message.id).forEach(reaction => { %>
                        <span class="bg-gray-200 dark:bg-gray-600 text-xs px-1.5 py-0.5 rounded-full cursor-pointer"><%= reaction.emoji %></span>
                      <% }) %>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>

        <!-- Typing indicator -->
        <div id="typing-indicator" class="h-6 px-3 sm:px-6 text-gray-500 dark:text-gray-400 italic text-sm"></div>
        <div id="reply-info" class="hidden bg-gray-200 dark:bg-gray-700/50 p-3 mx-3 sm:mx-6 rounded-t-lg text-sm border-b border-gray-300 dark:border-gray-600">
          Replying to <strong id="reply-username"></strong>: "<span id="reply-message" class="line-clamp-1"></span>"
          <button id="cancel-reply" class="float-right font-bold text-gray-500 hover:text-red-500 transition-colors">×</button>
        </div>
        <div class="p-2 sm:p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
            <form id="message-form" class="relative flex items-center gap-2 sm:gap-4">
              <div id="emoji-picker" class="hidden absolute bottom-full mb-2 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-2 shadow-lg">
                  <div class="grid grid-cols-8 gap-1"></div>
              </div>
              <button type="button" id="code-snippet-btn" class="absolute left-3 sm:left-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-lg transition-colors"><i class="fas fa-code"></i></button>
              <button type="button" id="emoji-btn" class="absolute left-10 sm:left-12 top-1/2 -translate-y-1/2 text-gray-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-lg transition-colors"><i class="far fa-smile"></i></button>
              <input id="message-input" class="flex-grow p-3 sm:p-4 pl-16 sm:pl-24 pr-12 sm:pr-16 bg-gray-100 dark:bg-gray-900 border-2 border-transparent rounded-full text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition" placeholder="Type a message..." autocomplete="off">
              <button type="submit" class="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 bg-indigo-600 text-white w-10 h-10 sm:w-12 sm:h-12 rounded-full hover:bg-indigo-700 transition-all shadow-md hover:shadow-lg transform hover:scale-105 flex-shrink-0 flex items-center justify-center"><i class="fas fa-paper-plane text-lg sm:text-xl"></i></button>
            </form>
        </div>
      </main>
  </div>

  <!-- All Files Modal -->
  <div id="files-modal" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/60 backdrop-blur-sm">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-11/12 max-w-4xl max-h-[80vh] flex flex-col m-4 border border-gray-200 dark:border-gray-700">
        <header class="p-4 sm:p-5 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center flex-shrink-0">
            <h2 class="text-lg sm:text-xl font-bold">All Shared Files</h2>
            <button id="close-files-modal-btn" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"><i class="fas fa-times text-2xl"></i></button>
        </header>
        <div id="modal-file-list" class="p-3 sm:p-6 overflow-y-auto grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4">
            <% files.forEach(file => { %>
              <div class="file-item p-3 rounded-lg bg-gray-100 dark:bg-gray-900/50 hover:bg-gray-200 dark:hover:bg-gray-700/50 transition border border-gray-200 dark:border-gray-700" data-file-id="<%= file.id %>">
                <% if (file.mimetype && file.mimetype.startsWith('image/')) { %>
                  <div class="relative w-full h-24 sm:h-32 rounded-md mb-2 overflow-hidden">
                    <img src="<%= file.filepath %>" alt="<%= file.filename %>" class="w-full h-full object-cover" loading="lazy" onerror="this.parentElement.innerHTML='<div class=&quot;w-full h-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center&quot;><i class=&quot;fas fa-image text-3xl text-gray-400&quot;></i></div>'">
                  </div>
                <% } else { %>
                  <div class="w-full h-24 sm:h-32 rounded-md mb-2 bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                    <% 
                      let iconClass = 'fa-file-alt';
                      if (file.mimetype) {
                        if (file.mimetype.includes('pdf')) iconClass = 'fa-file-pdf';
                        else if (file.mimetype.includes('word') || file.mimetype.includes('document')) iconClass = 'fa-file-word';
                        else if (file.mimetype.includes('excel') || file.mimetype.includes('spreadsheet')) iconClass = 'fa-file-excel';
                        else if (file.mimetype.includes('powerpoint') || file.mimetype.includes('presentation')) iconClass = 'fa-file-powerpoint';
                        else if (file.mimetype.includes('video')) iconClass = 'fa-file-video';
                        else if (file.mimetype.includes('audio')) iconClass = 'fa-file-audio';
                        else if (file.mimetype.includes('zip') || file.mimetype.includes('archive')) iconClass = 'fa-file-archive';
                        else if (file.mimetype.includes('text')) iconClass = 'fa-file-alt';
                      }
                    %>
                    <i class="fas <%= iconClass %> text-3xl sm:text-4xl text-gray-400 dark:text-gray-500"></i>
                  </div>
                <% } %>
                <a href="<%= file.filepath %>" target="_blank" class="text-indigo-500 hover:underline text-xs sm:text-sm break-all font-medium block mb-2" title="<%= file.filename %>">
                  <%= file.filename.length > 25 ? file.filename.substring(0, 22) + '...' : file.filename %>
                </a>
                <div class="flex justify-between items-center text-xs">
                    <%
                      // Improved download URL generation with better Cloudinary handling
                      let downloadUrl = file.filepath;
                      if (file.filepath.includes('cloudinary.com')) {
                        const parts = file.filepath.split('/upload/');
                        if (parts.length === 2) {
                          // Use fl_attachment transformation to force download with original filename
                          const filename = encodeURIComponent(file.filename);
                          downloadUrl = parts[0] + '/upload/fl_attachment:' + filename + '/' + parts[1];
                        }
                      }
                    %>
                    <a href="<%= downloadUrl %>" download="<%= file.filename %>" class="text-green-500 hover:text-green-600 transition-colors" title="Download <%= file.filename %>">
                      <i class="fas fa-download mr-1"></i> Download
                    </a>
                    <% if (file.user_id == user.id || ['owner', 'admin'].includes(userRole)) { %>
                        <button data-file-id="<%= file.id %>" data-filepath="<%= file.filepath %>" class="delete-file-btn text-red-500 hover:text-red-600 transition-colors" title="Delete <%= file.filename %>">
                          <i class="fas fa-trash mr-1"></i> Delete
                        </button>
                    <% } %>
                </div>
              </div>
            <% }) %>
        </div>
    </div>
  </div>

  <!-- Calendar Modal -->
  <div id="calendar-modal" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/60 backdrop-blur-sm">
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-11/12 max-w-2xl max-h-[80vh] flex flex-col m-4 border border-gray-200 dark:border-gray-700">
          <header class="p-4 sm:p-5 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h2 class="text-lg sm:text-xl font-bold">Group Calendar</h2>
              <button id="close-calendar-modal-btn" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"><i class="fas fa-times text-2xl"></i></button>
          </header>
          <div class="flex-grow p-3 sm:p-6 overflow-y-auto">
              <div id="calendar-events-list" class="space-y-4"></div>
          </div>
          <div class="p-3 sm:p-4 border-t border-gray-200 dark:border-gray-700">
              <form id="add-event-form" class="grid grid-cols-1 md:grid-cols-3 gap-2 sm:gap-4 items-end">
                  <input type="text" id="event-title" placeholder="Event Title" class="p-3 bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 border-transparent" required>
                  <input type="date" id="event-date" class="p-3 bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 border-transparent" required>
                  <button type="submit" class="bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 font-semibold">Add Event</button>
              </form>
          </div>
      </div>
  </div>

  <!-- Code Snippet Modal -->
  <div id="code-snippet-modal" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/60 backdrop-blur-sm">
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-11/12 max-w-3xl flex flex-col m-4 border border-gray-200 dark:border-gray-700">
          <header class="p-4 sm:p-5 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h2 class="text-lg sm:text-xl font-bold">Share Code Snippet</h2>
              <button id="close-code-modal-btn" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"><i class="fas fa-times text-2xl"></i></button>
          </header>
          <div class="p-3 sm:p-6">
              <form id="code-snippet-form">
                  <div class="mb-4">
                      <label for="language-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Language</label>
                      <select id="language-select" class="w-full p-3 bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 border-transparent">
                          <option value="javascript">JavaScript</option>
                          <option value="python">Python</option>
                          <option value="java">Java</option>
                          <option value="csharp">C#</option>
                          <option value="php">PHP</option>
                          <option value="ruby">Ruby</option>
                          <option value="go">Go</option>
                          <option value="html">HTML</option>
                          <option value="css">CSS</option>
                          <option value="sql">SQL</option>
                          <option value="plaintext">Plain Text</option>
                      </select>
                  </div>
                  <div class="mb-4">
                      <label for="code-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Code</label>
                      <textarea id="code-input" rows="10" class="w-full p-3 bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 border-transparent font-mono text-sm" placeholder="Paste your code here..."></textarea>
                  </div>
                  <div class="flex justify-end">
                      <button type="submit" class="bg-indigo-600 text-white py-3 px-6 rounded-lg hover:bg-indigo-700 font-semibold">Send Snippet</button>
                  </div>
              </form>
          </div>
      </div>
  </div>

  <!-- Incoming Call Modal -->
  <div id="incoming-call-modal" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/60 backdrop-blur-sm">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-11/12 max-w-sm m-4 p-6 text-center">
        <h2 class="text-2xl font-bold mb-2">Incoming Call</h2>
        <p id="incoming-call-text" class="text-gray-600 dark:text-gray-400 mb-6">You have an incoming video call.</p>
        <div class="flex justify-center gap-4">
            <button id="accept-call-btn" class="bg-green-500 text-white font-bold py-3 px-8 rounded-full hover:bg-green-600 transition-colors">Accept</button>
            <button id="decline-call-btn" class="bg-red-600 text-white font-bold py-3 px-8 rounded-full hover:bg-red-700 transition-colors">Decline</button>
        </div>
    </div>
  </div>

  <audio id="ringtone" src="https://cdn.pixabay.com/audio/2022/02/22/audio_e5e6d7c53d.mp3" loop preload="auto"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://unpkg.com/webrtc-adapter/out/adapter.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const socket = io();
      const groupId = "<%= group.id %>";
      const userId = "<%= user.id %>";
      const userUsername = "<%= user.username %>";
      const userRole = "<%= userRole %>";

      // --- WebRTC Group Call (Robust Debugging Version) ---
      const videoCallContainer = document.getElementById('video-call-container');
      const startVideoCallBtn = document.getElementById('start-video-call-btn');
      const endVideoCallBtn = document.getElementById('end-video-call-btn');
      const localVideo = document.getElementById('local-video');
      const videoGrid = document.getElementById('video-grid');
      const ringtone = document.getElementById('ringtone');
      const incomingCallModal = document.getElementById('incoming-call-modal');
      const incomingCallText = document.getElementById('incoming-call-text');
      const acceptCallBtn = document.getElementById('accept-call-btn');
      const declineCallBtn = document.getElementById('decline-call-btn');
      
      let localStream;
      let peerConnections = {}; // { socketId: RTCPeerConnection }
      const webrtcRoom = `webrtc-group-${groupId}`;
      let isCalling = false;
      const myUsername = '<%= user.username %>';

      const configuration = {
          iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      };

      function log(level, message, ...args) {
          const now = new Date();
          const time = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}.${now.getMilliseconds()}`;
          console[level](`[${time}] ${message}`, ...args);
      }

      async function joinCall() {
          if (isCalling) {
              log('warn', 'joinCall attempted while already in a call.');
              return;
          }
          log('info', 'Attempting to join call...');
          isCalling = true;
          
          incomingCallModal.classList.add('hidden');
          ringtone.pause();
          videoCallContainer.classList.remove('hidden');
          videoCallContainer.classList.add('flex');

          try {
              localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
              localVideo.srcObject = localStream;
              log('info', 'Local media stream acquired successfully.');
              socket.emit('join-call', { room: webrtcRoom });
              log('info', `Emitted 'join-call' for room: ${webrtcRoom}`);
          } catch (e) {
              log('error', 'Error accessing media devices.', e);
              alert('Could not access camera and microphone. Please check permissions.');
              endCall();
          }
      }

      function endCall() {
          log('info', 'Ending call...');
          isCalling = false;
          for (const peerId in peerConnections) {
              if (peerConnections[peerId]) {
                  peerConnections[peerId].close();
              }
          }
          peerConnections = {};
          log('info', 'All peer connections closed.');

          if (localStream) {
              localStream.getTracks().forEach(track => track.stop());
              localStream = null;
              log('info', 'Local media stream stopped.');
          }
          
          videoCallContainer.classList.add('hidden');
          videoCallContainer.classList.remove('flex');
          
          const remoteVideos = videoGrid.querySelectorAll('.remote-video-container');
          remoteVideos.forEach(v => v.remove());
          log('info', 'All remote video elements removed.');

          socket.emit('leave-call', webrtcRoom);
          log('info', `Emitted 'leave-call' for room: ${webrtcRoom}`);
      }

      function createPeerConnection(peerId, isInitiator) {
          log('info', `Creating peer connection for peer: ${peerId}, Initiator: ${isInitiator}`);
          if (peerConnections[peerId]) {
              log('warn', `Peer connection for ${peerId} already exists. Closing old one.`);
              peerConnections[peerId].close();
          }

          const pc = new RTCPeerConnection(configuration);
          peerConnections[peerId] = pc;

          pc.onconnectionstatechange = () => {
              log('info', `Connection state with ${peerId}: ${pc.connectionState}`);
              if (pc.connectionState === 'failed') {
                  pc.restartIce();
                  log('warn', `Connection with ${peerId} failed. Restarting ICE.`);
              }
          };

          localStream.getTracks().forEach(track => {
              pc.addTrack(track, localStream);
          });
          log('info', `Local stream tracks added to peer connection for ${peerId}.`);

          pc.onicecandidate = event => {
              if (event.candidate) {
                  log('info', `Sending ICE candidate to ${peerId}`);
                  socket.emit('webrtc-ice-candidate', { to: peerId, candidate: event.candidate });
              }
          };

          pc.ontrack = event => {
              log('info', `Received remote track from ${peerId}.`);
              addRemoteVideoStream(peerId, event.streams[0]);
          };
          
          if (isInitiator) {
              log('info', `As initiator, creating offer for ${peerId}`);
              pc.createOffer()
                  .then(offer => pc.setLocalDescription(offer))
                  .then(() => {
                      log('info', `Offer created and set as local description. Sending to ${peerId}.`);
                      socket.emit('webrtc-offer', { to: peerId, sdp: pc.localDescription });
                  })
                  .catch(e => log('error', `Error creating offer for ${peerId}:`, e));
          }
          return pc;
      }

      function addRemoteVideoStream(peerId, stream) {
          log('info', `Adding remote video stream for peer: ${peerId}`);
          let container = document.getElementById(`video-container-${peerId}`);
          if (container) {
              log('warn', `Video container for ${peerId} already exists. Re-attaching stream.`);
              container.querySelector('video').srcObject = stream;
              return;
          }
          
          container = document.createElement('div');
          container.id = `video-container-${peerId}`;
          container.className = 'remote-video-container relative w-full h-full bg-black rounded-lg overflow-hidden';
          
          const video = document.createElement('video');
          video.autoplay = true;
          video.playsInline = true;
          video.className = 'w-full h-full object-cover';
          
          container.appendChild(video);
          videoGrid.appendChild(container);
          video.srcObject = stream;
          log('info', `Successfully added video element for ${peerId}.`);
      }

      // --- Group Call Socket Events ---
      startVideoCallBtn.addEventListener('click', () => {
        log('info', "Start Call button clicked.");
        socket.emit('start-call', { room: webrtcRoom, groupId: groupId, username: myUsername });
        joinCall();
      });

      endVideoCallBtn.addEventListener('click', endCall);

      socket.on('call-started', (data) => {
        log('info', `Incoming call from ${data.username} (${data.from})`);
        if (!isCalling) {
            incomingCallText.textContent = `${data.username} started a call.`;
            incomingCallModal.classList.remove('hidden');
            ringtone.play().catch(e => log('warn', 'Ringtone play failed:', e));
        }
      });

      acceptCallBtn.addEventListener('click', () => {
          log('info', 'Accept Call button clicked.');
          joinCall();
      });
      declineCallBtn.addEventListener('click', () => {
          log('info', 'Decline Call button clicked.');
          incomingCallModal.classList.add('hidden');
          ringtone.pause();
      });

      socket.on('existing-peers', (otherUsers) => {
          log('info', 'Received existing peers:', otherUsers);
          if (otherUsers.length > 0) {
            otherUsers.forEach(peerId => {
                createPeerConnection(peerId, true); // This client is the initiator for existing peers
            });
          } else {
            log('info', 'No existing peers in the room. Waiting for others to join.');
          }
      });

      socket.on('new-peer', (data) => {
        log('info', `New peer joined: ${data.peerId}. Waiting for their offer.`);
        // The new peer will initiate the connection, so we just wait for the offer.
        // We create a peer connection here to be ready.
        if (isCalling) {
            createPeerConnection(data.peerId, false); // Not the initiator
        }
      });

      socket.on('webrtc-offer', async (data) => {
          log('info', `Received WebRTC offer from ${data.from}`);
          let pc = peerConnections[data.from];
          if (!pc) {
              log('warn', `No peer connection found for ${data.from}, creating one.`);
              pc = createPeerConnection(data.from, false);
          }
          try {
            await pc.setRemoteDescription(new RTCSessionDescription(data.sdp));
            log('info', `Remote description (offer) set for ${data.from}. Creating answer.`);
            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            log('info', `Answer created and set as local description. Sending to ${data.from}.`);
            socket.emit('webrtc-answer', { to: data.from, sdp: answer });
          } catch (e) {
            log('error', `Error handling offer from ${data.from}:`, e);
          }
      });

      socket.on('webrtc-answer', (data) => {
          log('info', `Received WebRTC answer from ${data.from}.`);
          const pc = peerConnections[data.from];
          if (pc) {
              pc.setRemoteDescription(new RTCSessionDescription(data.sdp))
                .catch(e => log('error', `Error setting remote description (answer) from ${data.from}:`, e));
          } else {
              log('warn', `Received an answer from ${data.from}, but no peer connection exists.`);
          }
      });

      socket.on('webrtc-ice-candidate', (data) => {
          log('info', `Received ICE candidate from ${data.from}.`);
          const pc = peerConnections[data.from];
          if (pc) {
              pc.addIceCandidate(new RTCIceCandidate(data.candidate))
                .catch(e => log('error', `Error adding ICE candidate from ${data.from}:`, e));
          } else {
              log('warn', `Received an ICE candidate from ${data.from}, but no peer connection exists.`);
          }
      });

      socket.on('peer-disconnected', (peerId) => {
          log('info', `Peer ${peerId} disconnected.`);
          if (peerConnections[peerId]) {
              peerConnections[peerId].close();
              delete peerConnections[peerId];
          }
          const videoContainer = document.getElementById(`video-container-${peerId}`);
          if (videoContainer) {
              videoContainer.remove();
          }
      });
      // --- End Group Call ---

      // --- Theme Management ---
      const themeToggleBtn = document.getElementById('theme-toggle');
      const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
      const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

      const setTheme = (isDark) => {
          document.documentElement.classList.toggle('dark', isDark);
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
          themeToggleLightIcon.classList.toggle('hidden', !isDark);
          themeToggleDarkIcon.classList.toggle('hidden', isDark);
          
          const newHighlightTheme = isDark ? 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css' : 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-light.min.css';
          document.getElementById('highlight-theme').setAttribute('href', newHighlightTheme);
      };

      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const savedTheme = localStorage.getItem('theme');
      const isInitiallyDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
      setTheme(isInitiallyDark);

      themeToggleBtn.addEventListener('click', () => {
          const isCurrentlyDark = document.documentElement.classList.contains('dark');
          setTheme(!isCurrentlyDark);
      });

      // --- Socket.IO Listeners ---
      socket.emit('joinGroup', { groupId, userId, username: userUsername });

      socket.on('userList', (users) => {
        const userList = document.getElementById('user-list');
        userList.innerHTML = '';
        users.forEach(user => {
          const li = document.createElement('li');
          li.className = 'flex items-center gap-3';
          li.innerHTML = `<span class="relative flex h-3 w-3"><span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span><span class="relative inline-flex rounded-full h-3 w-3 bg-green-500"></span></span> ${user.username}`;
          userList.appendChild(li);
        });
      });

      socket.on('chatMessage', (data) => {
        addMessageToUI(data.message);
        document.getElementById('typing-indicator').textContent = '';
      });

      socket.on('typing', (data) => {
        const typingIndicator = document.getElementById('typing-indicator');
        if (data.isTyping && data.userId !== userId) {
          typingIndicator.textContent = `${data.username} is typing...`;
        } else {
          typingIndicator.textContent = '';
        }
      });

      socket.on('messageDeleted', (messageId) => {
        const messageElement = document.getElementById(`message-${messageId}`);
        if (messageElement) {
          messageElement.remove();
        }
      });

      // Handle real-time file events
      socket.on('newFile', (fileData) => {
        // Refresh files modal if it's open
        const filesModal = document.getElementById('files-modal');
        if (!filesModal.classList.contains('hidden')) {
          location.reload(); // Simple refresh for now - could be optimized with dynamic insertion
        }
      });

      socket.on('fileDeleted', (data) => {
        // Remove file from modal if it's open
        const fileElement = document.querySelector(`[data-file-id="${data.fileId}"]`);
        if (fileElement) {
          fileElement.style.opacity = '0';
          fileElement.style.transform = 'scale(0.8)';
          setTimeout(() => {
            fileElement.remove();
          }, 300);
        }
      });

      // --- Message & Form Handling ---
      const messageContainer = document.getElementById('message-container');
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      let typingTimer;

      messageContainer.scrollTop = messageContainer.scrollHeight;

      messageInput.addEventListener('input', () => {
        clearTimeout(typingTimer);
        socket.emit('typing', { groupId, userId, username: userUsername, isTyping: true });
        typingTimer = setTimeout(() => {
          socket.emit('typing', { groupId, userId, username: userUsername, isTyping: false });
        }, 2000);
      });

      messageForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const message = messageInput.value.trim();
        if (message) {
          const parentMessageId = messageInput.dataset.replyToId;
          // QoS: Add priority to the message payload
          socket.emit('chatMessage', { groupId, userId, message, parentMessageId, priority: 'high' });
          messageInput.value = '';
          cancelReply();
          clearTimeout(typingTimer);
          socket.emit('typing', { groupId, userId, username: userUsername, isTyping: false });
        }
      });

      // --- UI Functions ---
      function addMessageToUI(message) {
        const div = document.createElement('div');
        div.className = 'message-container';
        div.id = `message-${message.id}`;
        const isSelf = message.user_id == userId;

        let replyHTML = '';
        if (message.parent_message_id) {
          replyHTML = `
            <div class="border-l-2 ${isSelf ? 'border-indigo-300' : 'border-indigo-500'} pl-2 text-xs opacity-80 mb-2">
              <strong>Replying to ${message.parent_username}</strong>
            </div>`;
        }

        let messageContentHTML = '';
        if (message.is_code_snippet) {
            // Ensure hljs is available
            if (typeof hljs !== 'undefined') {
                messageContentHTML = `<pre><code class="language-${message.language} code-snippet">${hljs.highlight(message.message, {language: message.language, ignoreIllegals: true}).value}</code></pre>`;
            } else {
                messageContentHTML = `<pre><code class="language-${message.language} code-snippet">${message.message}</code></pre>`;
            }
        } else {
            messageContentHTML = `<p class="text-base break-words">${message.message.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</p>`;
        }

        div.innerHTML = `
          <div class="message-bubble w-full flex ${isSelf ? 'justify-end' : 'justify-start'}" data-message-id="${message.id}">
            <div class="relative max-w-xl message-content">
              <div class="rounded-2xl px-4 py-3 ${isSelf ? 'bg-indigo-600 text-white rounded-br-lg' : 'bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-bl-lg shadow-sm'}">
                <div class="font-bold text-sm mb-1">${message.username}</div>
                ${replyHTML}
                ${messageContentHTML}
              </div>
              <div class="message-actions gap-2 text-xs text-gray-500 dark:text-gray-400 ${isSelf ? 'self' : 'other'}">
                <button class="reply-btn hover:text-indigo-500" data-parent-id="${message.id}" data-parent-username="${message.username}" data-parent-message="${message.message}" title="Reply"><i class="fas fa-reply"></i></button>
                <button class="react-btn hover:text-yellow-500" title="React"><i class="fas fa-smile"></i></button>
                ${(isSelf || ['owner', 'admin'].includes(userRole)) ? `<button class="delete-btn hover:text-red-500" data-message-id="${message.id}" title="Delete"><i class="fas fa-trash"></i></button>` : ''}
              </div>
              <div class="flex items-center gap-2 mt-1.5 px-2 text-xs text-gray-400 dark:text-gray-500 ${isSelf ? 'justify-end' : ''}">
                <span>${new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
              </div>
            </div>
          </div>`;
        
        messageContainer.appendChild(div);
        messageContainer.scrollTop = messageContainer.scrollHeight;
      }

      // --- Event Delegation for dynamic elements ---
      document.body.addEventListener('click', function(e) {
        // Delete message
        if (e.target.closest('.delete-btn')) {
          const button = e.target.closest('.delete-btn');
          const messageId = button.dataset.messageId;
          if (confirm('Are you sure you want to delete this message?')) {
            socket.emit('deleteMessage', { messageId, groupId });
          }
        }
        // Reply to message
        if (e.target.closest('.reply-btn')) {
          const button = e.target.closest('.reply-btn');
          setupReply(button.dataset.parentId, button.dataset.parentUsername, button.dataset.parentMessage);
        }
        // Delete file with improved feedback
        if (e.target.closest('.delete-file-btn')) {
            const button = e.target.closest('.delete-file-btn');
            const fileId = button.dataset.fileId;
            const filepath = button.dataset.filepath;
            const fileName = button.closest('.file-item').querySelector('a').textContent;
            
            if (confirm(`Are you sure you want to delete "${fileName}"? This action cannot be undone.`)) {
                // Disable button and show loading
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Deleting...';
                
                fetch(`/chat/${groupId}/files/${fileId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ filepath })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        // Remove file item with animation
                        const fileItem = button.closest('.file-item');
                        fileItem.style.opacity = '0';
                        fileItem.style.transform = 'scale(0.8)';
                        setTimeout(() => {
                            fileItem.remove();
                        }, 300);
                        
                        // Show success message
                        showUploadSuccess(`"${fileName}" deleted successfully!`);
                    } else {
                        alert(data.error || 'Failed to delete file.');
                        // Reset button
                        button.disabled = false;
                        button.innerHTML = '<i class="fas fa-trash mr-1"></i> Delete';
                    }
                })
                .catch(error => {
                    console.error('Delete error:', error);
                    alert('An error occurred while deleting the file.');
                    // Reset button
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-trash mr-1"></i> Delete';
                });
            }
        }
      });

      // --- Reply Functionality ---
      const replyInfo = document.getElementById('reply-info');
      const cancelReplyBtn = document.getElementById('cancel-reply');

      function setupReply(id, username, message) {
        messageInput.dataset.replyToId = id;
        document.getElementById('reply-username').textContent = username;
        document.getElementById('reply-message').textContent = message;
        replyInfo.classList.remove('hidden');
        messageInput.focus();
      }

      function cancelReply() {
        delete messageInput.dataset.replyToId;
        replyInfo.classList.add('hidden');
      }

      cancelReplyBtn.addEventListener('click', cancelReply);

      // --- Sidebar Toggle for Mobile ---
      const sidebar = document.getElementById('chat-sidebar');
      const sidebarToggleBtn = document.getElementById('sidebar-toggle-btn');
      const closeSidebarBtn = document.getElementById('close-sidebar-btn');
      const sidebarBackdrop = document.getElementById('sidebar-backdrop');

      const toggleSidebar = () => {
        sidebar.classList.toggle('is-open');
        sidebarBackdrop.classList.toggle('is-open');
      };

      sidebarToggleBtn.addEventListener('click', toggleSidebar);
      closeSidebarBtn.addEventListener('click', toggleSidebar);
      sidebarBackdrop.addEventListener('click', toggleSidebar);

      // --- File Upload with Progress and Error Handling ---
      const fileInput = document.getElementById('file-input');
      const uploadText = document.getElementById('upload-text');
      const uploadProgress = document.getElementById('upload-progress');
      const uploadProgressBar = document.getElementById('upload-progress-bar');
      const uploadError = document.getElementById('upload-error');
      const uploadSuccess = document.getElementById('upload-success');
      const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 MB

      function resetUploadState() {
        uploadText.classList.remove('hidden');
        uploadProgress.classList.add('hidden');
        uploadProgressBar.style.width = '0%';
        uploadError.classList.add('hidden');
        uploadSuccess.classList.add('hidden');
        fileInput.value = '';
      }

      function showUploadError(message) {
        uploadError.textContent = message;
        uploadError.classList.remove('hidden');
        uploadProgress.classList.add('hidden');
        uploadText.classList.remove('hidden');
      }

      function showUploadSuccess(message) {
        uploadSuccess.textContent = message;
        uploadSuccess.classList.remove('hidden');
        uploadProgress.classList.add('hidden');
        uploadText.classList.remove('hidden');
        
        // Hide success message after 3 seconds
        setTimeout(() => {
          uploadSuccess.classList.add('hidden');
        }, 3000);
      }

      async function uploadFile(file) {
        if (!file) return;

        // Validate file size
        if (file.size > MAX_FILE_SIZE) {
          showUploadError(`File is too large (${(file.size / 1024 / 1024).toFixed(2)} MB). Maximum size is 10 MB.`);
          return;
        }

        // Validate file type (basic security check)
        const dangerousTypes = ['application/x-msdownload', 'application/x-msdos-program', 'application/x-executable'];
        if (dangerousTypes.includes(file.type)) {
          showUploadError('This file type is not allowed for security reasons.');
          return;
        }

        // Show upload progress
        uploadText.classList.add('hidden');
        uploadProgress.classList.remove('hidden');
        uploadError.classList.add('hidden');
        uploadSuccess.classList.add('hidden');

        const formData = new FormData();
        formData.append('file', file);

        try {
          const xhr = new XMLHttpRequest();
          
          // Upload progress tracking
          xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
              const percentComplete = (e.loaded / e.total) * 100;
              uploadProgressBar.style.width = percentComplete + '%';
            }
          });

          // Handle completion
          xhr.addEventListener('load', () => {
            if (xhr.status === 200) {
              const response = JSON.parse(xhr.responseText);
              if (response.success) {
                showUploadSuccess(`${file.name} uploaded successfully!`);
                // Emit to socket for real-time updates
                socket.emit('newFile', response.file);
              } else {
                showUploadError(response.error || 'Upload failed');
              }
            } else {
              showUploadError('Upload failed. Please try again.');
            }
            resetUploadState();
          });

          // Handle errors
          xhr.addEventListener('error', () => {
            showUploadError('Network error occurred during upload.');
            resetUploadState();
          });

          // Handle timeout
          xhr.addEventListener('timeout', () => {
            showUploadError('Upload timed out. Please try again.');
            resetUploadState();
          });

          xhr.timeout = 60000; // 60 second timeout
          xhr.open('POST', `/chat/${groupId}/upload`);
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send(formData);

        } catch (error) {
          console.error('Upload error:', error);
          showUploadError('An unexpected error occurred.');
          resetUploadState();
        }
      }

      fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          uploadFile(file);
        }
      });

      // --- Modal Logic ---
      const setupModal = (modalId, openBtnId, closeBtnId) => {
        const modal = document.getElementById(modalId);
        const openBtn = document.getElementById(openBtnId);
        const closeBtn = document.getElementById(closeBtnId);
        if (!modal || !openBtn || !closeBtn) return;

        openBtn.addEventListener('click', () => modal.classList.remove('hidden'));
        closeBtn.addEventListener('click', () => modal.classList.add('hidden'));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.classList.add('hidden');
        });
      };

      setupModal('files-modal', 'view-files-btn', 'close-files-modal-btn');
      setupModal('calendar-modal', 'view-calendar-btn', 'close-calendar-modal-btn');
      setupModal('code-snippet-modal', 'code-snippet-btn', 'close-code-modal-btn');

      // --- Emoji Picker ---
      const emojiBtn = document.getElementById('emoji-btn');
      const emojiPicker = document.getElementById('emoji-picker');
      const emojiGrid = emojiPicker.querySelector('.grid');
      const emojis = ['😀', '😂', '❤️', '👍', '🙏', '🎉', '🤔', '😢', '🔥', '🚀', '💡', '💯', '🙌', '😎', '😮', '🤯'];
      
      emojis.forEach(emoji => {
          const span = document.createElement('span');
          span.className = 'emoji';
          span.textContent = emoji;
          span.addEventListener('click', () => {
              messageInput.value += emoji;
              emojiPicker.classList.add('hidden');
              messageInput.focus();
          });
          emojiGrid.appendChild(span);
      });

      emojiBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          emojiPicker.classList.toggle('hidden');
      });

      document.addEventListener('click', (e) => {
          if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) {
              emojiPicker.classList.add('hidden');
          }
      });

      // --- Code Snippet Form ---
      const codeSnippetForm = document.getElementById('code-snippet-form');
      codeSnippetForm.addEventListener('submit', (e) => {
          e.preventDefault();
          const language = document.getElementById('language-select').value;
          const code = document.getElementById('code-input').value;
          if (code) {
              socket.emit('chatMessage', {
                  groupId,
                  userId,
                  message: code,
                  isCodeSnippet: true,
                  language: language,
                  priority: 'medium' // QoS for code snippets
              });
              document.getElementById('code-snippet-modal').classList.add('hidden');
              document.getElementById('code-input').value = '';
          }
      });

      // --- Calendar ---
      const addEventForm = document.getElementById('add-event-form');
      const eventsList = document.getElementById('calendar-events-list');

      const fetchEvents = () => {
          fetch(`/chat/${groupId}/events`)
              .then(res => res.json())
              .then(events => {
                  eventsList.innerHTML = '';
                  if (events.length === 0) {
                      eventsList.innerHTML = '<p class="text-center text-gray-500">No events scheduled.</p>';
                      return;
                  }
                  events.forEach(event => {
                      const eventEl = document.createElement('div');
                      eventEl.className = 'p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg flex justify-between items-center';
                      eventEl.innerHTML = `
                          <div>
                              <p class="font-bold">${event.title}</p>
                              <p class="text-sm text-gray-500 dark:text-gray-400">${new Date(event.date).toLocaleDateString()}</p>
                          </div>
                          <button data-event-id="${event.id}" class="delete-event-btn text-red-500 hover:text-red-600 text-xs"><i class="fas fa-trash"></i></button>
                      `;
                      eventsList.appendChild(eventEl);
                  });
              });
      };

      addEventForm.addEventListener('submit', e => {
          e.preventDefault();
          const title = document.getElementById('event-title').value;
          const date = document.getElementById('event-date').value;
          fetch(`/chat/${groupId}/events`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ title, date })
          }).then(() => {
              fetchEvents();
              addEventForm.reset();
          });
      });

      eventsList.addEventListener('click', e => {
          if (e.target.closest('.delete-event-btn')) {
              const eventId = e.target.closest('.delete-event-btn').dataset.eventId;
              fetch(`/chat/${groupId}/events/${eventId}`, { method: 'DELETE' }).then(fetchEvents);
          }
      });

      document.getElementById('view-calendar-btn').addEventListener('click', fetchEvents);
      
      // Initial highlight of existing code blocks
      document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });
    });
  </script>
</body>
</html>
