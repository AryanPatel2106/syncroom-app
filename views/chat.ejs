<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat - <%= group.name %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    #particles-js { position: fixed; width: 100%; height: 100%; top: 0; left: 0; z-index: -1; }
    
    /* Glassmorphism card effect */
    .glass-ui {
      background: rgba(30, 41, 59, 0.2); /* slate-800 with transparency */
      backdrop-filter: blur(15px);
      -webkit-backdrop-filter: blur(15px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .message-bubble { animation: slideIn 0.3s ease-out forwards; }
    @keyframes slideIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    
    /* Custom Scrollbar */
    ::-webkit-scrollbar { width: 6px; }
    ::-webkit-scrollbar-track { background: transparent; }
    ::-webkit-scrollbar-thumb { background: rgba(255, 255, 255, 0.2); border-radius: 3px; }
    ::-webkit-scrollbar-thumb:hover { background: rgba(255, 255, 255, 0.3); }

    /* Responsive Layout CSS */
    .sidebar {
      width: 288px; /* w-72 */
      border-right: 1px solid rgba(255, 255, 255, 0.1);
      flex-shrink: 0;
    }
    .mobile-header, .sidebar-close-btn, .sidebar-backdrop {
      display: none;
    }

    @media (max-width: 767px) {
      .sidebar {
        position: fixed;
        left: 0; top: 0; bottom: 0; z-index: 40;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        background: #111827; /* bg-gray-900 */
        border-right-width: 1px;
      }
      .sidebar.is-open { transform: translateX(0); }
      .sidebar-backdrop { position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); z-index: 30; }
      .sidebar-backdrop.is-open { display: block; }
      .main-chat { width: 100%; }
      .mobile-header { display: flex; }
      .sidebar-close-btn { display: block; }
      .desktop-header { display: none; }
    }
    
    /* Emoji Picker Styles */
    #emoji-picker {
        width: 280px;
        max-height: 200px;
        overflow-y: auto;
    }
    .emoji {
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: background-color 0.2s;
        text-align: center;
        font-size: 1.25rem;
    }
    .emoji:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
  </style>
</head>

<body class="bg-gray-900 text-white h-screen overflow-hidden">
  <div id="particles-js"></div>

  <div class="relative z-10 h-full p-2 sm:p-4">
    <div class="glass-ui rounded-2xl shadow-2xl h-full flex overflow-hidden">
      
      <!-- Sidebar -->
      <aside id="chat-sidebar" class="sidebar flex flex-col">
        <div class="p-4">
            <div class="flex justify-between items-center mb-4">
                <h1 class="text-2xl font-bold desktop-header"><%= group.name %></h1>
                <div class="sidebar-close-btn">
                    <button id="close-sidebar-btn" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times text-2xl"></i>
                    </button>
                </div>
            </div>
            <p class="text-sm text-gray-400 mb-6 desktop-header">Logged in as: <%= user.username %></p>
        </div>

        <div class="px-4 mb-6">
          <h2 class="font-bold text-gray-300 mb-3 text-sm tracking-wider uppercase">Online Users</h2>
          <ul id="user-list" class="space-y-2 text-sm text-gray-300"></ul>
        </div>
        
        <div class="flex-grow p-4">
            <h2 class="font-bold text-gray-300 mb-3 text-sm tracking-wider uppercase">Group Files</h2>
            <button id="view-files-btn" class="w-full text-sm bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors"><i class="fas fa-folder-open mr-2"></i>View All Files</button>
        </div>
        
        <div class="p-4 border-t border-white/10">
            <form action="/chat/<%= group.id %>/upload" method="POST" enctype="multipart/form-data" class="mb-2">
              <input type="file" name="file" class="w-full text-xs text-gray-400 file:mr-2 file:py-1 file:px-3 file:rounded-full file:border-0 file:text-xs file:font-semibold file:bg-blue-800 file:text-blue-200 hover:file:bg-blue-700 cursor-pointer" required>
              <button type="submit" class="w-full mt-2 text-sm bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors font-semibold">Upload File</button>
            </form>
            <% if (userRole === 'owner' || userRole === 'admin') { %>
              <a href="/chat/<%= group.id %>/manage" class="block text-center text-sm bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors"><i class="fas fa-users-cog mr-2"></i>Manage Group</a>
            <% } %>
        </div>
      </aside>
      <div id="sidebar-backdrop" class="sidebar-backdrop"></div>

      <!-- Main Chat Area -->
      <main class="main-chat flex flex-col flex-grow">
        <header class="mobile-header p-4 border-b border-white/10 items-center flex-shrink-0">
          <button id="sidebar-toggle-btn" class="text-gray-300 mr-4">
            <i class="fas fa-bars text-xl"></i>
          </button>
          <h1 class="text-xl font-bold"><%= group.name %></h1>
        </header>

        <div id="message-container" class="flex-grow overflow-y-auto p-4 sm:p-6 space-y-6">
          <% messages.forEach(msg => { %>
            <div class="message-bubble w-full flex <%= msg.user_id == user.id ? 'justify-end' : 'justify-start' %>" data-message-id="<%= msg.id %>">
              <div class="max-w-md md:max-w-lg">
                <div class="rounded-xl px-4 py-2 <%= msg.user_id == user.id ? 'bg-gradient-to-r from-blue-600 to-violet-600 text-white' : 'bg-gray-700 bg-opacity-50 text-gray-200' %>">
                  <div class="font-bold text-sm"><%= msg.username %></div>
                  <% if (msg.parent_message_id) { %>
                    <div class="border-l-2 border-blue-300 pl-2 text-xs opacity-80 mb-1 mt-1">
                      <strong><%= msg.parent_username %></strong>: <%= msg.message.substring(0, 50) %>...
                    </div>
                  <% } %>
                  <p class="text-base break-words mt-1"><%= msg.message %></p>
                  <div class="reactions-container flex gap-1 mt-2">
                    <% reactions.filter(r => r.message_id === msg.id).forEach(reaction => { %>
                      <span class="bg-gray-800 bg-opacity-50 text-xs px-2 py-1 rounded-full cursor-pointer"><%= reaction.emoji %></span>
                    <% }) %>
                  </div>
                </div>
                <div class="flex items-center gap-2 mt-1 px-2 text-xs text-gray-500 <%= msg.user_id == user.id ? 'justify-end' : '' %>">
                  <span><%= new Date(msg.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
                  <button class="reply-btn hover:text-blue-400" data-parent-id="<%= msg.id %>" data-parent-username="<%= msg.username %>" data-parent-message="<%= msg.message %>"><i class="fas fa-reply"></i></button>
                  <button class="react-btn hover:text-yellow-400"><i class="fas fa-smile"></i></button>
                  <% if (msg.user_id == user.id || ['owner', 'admin'].includes(userRole)) { %>
                    <button class="delete-btn hover:text-red-400" data-message-id="<%= msg.id %>"><i class="fas fa-trash"></i></button>
                  <% } %>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
        
        <div class="p-4 sm:p-6 border-t border-white/10 flex-shrink-0">
          <div id="typing-indicator" class="h-5 text-sm text-gray-400 italic"></div>
          <div id="reply-info" class="hidden bg-black bg-opacity-20 p-2 rounded-t-lg text-sm mb-2">
            Replying to <strong id="reply-username"></strong>: "<span id="reply-message"></span>"
            <button id="cancel-reply" class="float-right font-bold text-red-500 hover:text-red-400">×</button>
          </div>
          <form id="message-form" class="relative flex items-center gap-2 sm:gap-4">
            <div id="emoji-picker" class="hidden absolute bottom-full mb-2 bg-gray-800/80 backdrop-blur-md border border-white/10 rounded-lg p-2 shadow-lg">
                <div class="grid grid-cols-8 gap-1">
                    <!-- Emojis will be dynamically inserted here -->
                </div>
            </div>
            <button type="button" id="emoji-btn" class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-200 text-lg">
                <i class="far fa-smile"></i>
            </button>
            <input id="message-input" class="flex-grow p-3 pl-10 bg-gray-800 bg-opacity-50 border border-transparent rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 transition" placeholder="Type a message..." autocomplete="off">
            <button type="submit" class="bg-gradient-to-r from-sky-500 to-indigo-500 text-white px-5 py-3 rounded-lg hover:from-sky-600 hover:to-indigo-600 transition-all shadow-md"><i class="fas fa-paper-plane"></i></button>
          </form>
        </div>
      </main>
    </div>
  </div>

  <!-- All Files Modal -->
  <div id="files-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm">
    <div class="glass-ui rounded-2xl shadow-2xl w-full max-w-2xl max-h-[80vh] flex flex-col m-4">
        <header class="p-4 border-b border-white/10 flex justify-between items-center">
            <h2 class="text-xl font-bold">All Shared Files</h2>
            <button id="close-files-modal-btn" class="text-gray-400 hover:text-white"><i class="fas fa-times text-2xl"></i></button>
        </header>
        <div id="modal-file-list" class="p-6 overflow-y-auto grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            <% files.forEach(file => { %>
              <div class="file-item p-3 rounded-lg bg-black bg-opacity-20 hover:bg-opacity-30 transition" data-file-id="<%= file.id %>">
                <% if (file.mimetype && file.mimetype.startsWith('image/')) { %>
                  <img src="<%= file.filepath %>" alt="<%= file.filename %>" class="w-full h-32 object-cover rounded-md mb-2">
                <% } else { %>
                  <div class="w-full h-32 rounded-md mb-2 bg-gray-700 flex items-center justify-center">
                    <i class="fas fa-file-alt text-4xl text-gray-500"></i>
                  </div>
                <% } %>
                <a href="<%= file.filepath %>" target="_blank" class="text-blue-400 hover:underline text-sm break-all font-medium"><%= file.filename %></a>
                <div class="flex justify-between items-center mt-2">
                    <a href="<%= file.filepath.replace('/upload/', '/upload/fl_attachment/') %>" class="text-green-400 hover:text-green-300 text-xs"><i class="fas fa-download mr-1"></i> Download</a>
                    <% if (file.user_id == user.id || ['owner', 'admin'].includes(userRole)) { %>
                        <button data-file-id="<%= file.id %>" data-filepath="<%= file.filepath %>" class="delete-file-btn text-red-500 hover:text-red-400 text-xs"><i class="fas fa-trash mr-1"></i> Delete</button>
                    <% } %>
                </div>
              </div>
            <% }) %>
        </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/tsparticles@1.37.5/dist/tsparticles.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // --- Particle Background ---
      const particleConfig = { particles: { number: { value: 50, density: { enable: true, value_area: 800 } }, color: { value: "#ffffff" }, shape: { type: "circle" }, opacity: { value: 0.3, random: true }, size: { value: 2, random: true }, line_linked: { enable: false }, move: { enable: true, speed: 1.5, direction: "none", random: true, straight: false, out_mode: "out" } }, interactivity: { detect_on: "canvas", events: { onhover: { enable: true, mode: "bubble" }, onclick: { enable: false } }, modes: { bubble: { distance: 200, size: 4, duration: 2, opacity: 0.8 } } }, retina_detect: true };
      if (window.particlesJS) { particlesJS('particles-js', particleConfig); }
      
      // --- Responsive Sidebar ---
      const sidebar = document.getElementById('chat-sidebar');
      const openBtn = document.getElementById('sidebar-toggle-btn');
      const closeBtn = document.getElementById('close-sidebar-btn');
      const backdrop = document.getElementById('sidebar-backdrop');
      if(openBtn) openBtn.addEventListener('click', () => { sidebar.classList.add('is-open'); backdrop.classList.add('is-open'); });
      if(closeBtn) closeBtn.addEventListener('click', () => { sidebar.classList.remove('is-open'); backdrop.classList.remove('is-open'); });
      if(backdrop) backdrop.addEventListener('click', () => { sidebar.classList.remove('is-open'); backdrop.classList.remove('is-open'); });
      
      // --- Emoji Picker Logic ---
      const emojiBtn = document.getElementById('emoji-btn');
      const emojiPicker = document.getElementById('emoji-picker');
      const messageInput = document.getElementById('message-input');
      const emojis = ['😀', '😂', '😍', '🤔', '👍', '❤️', '🔥', '🎉', '👋', '😢', '🙏', '🚀', '💻', '💡', '💯', '🤯', '😊', '🥳', '😎', '🙌', '👀', '✅', '✨', '👏'];
      const emojiGrid = emojiPicker.querySelector('.grid');
      emojis.forEach(emoji => {
          const emojiSpan = document.createElement('span');
          emojiSpan.className = 'emoji';
          emojiSpan.textContent = emoji;
          emojiSpan.addEventListener('click', () => { messageInput.value += emoji; messageInput.focus(); });
          emojiGrid.appendChild(emojiSpan);
      });
      emojiBtn.addEventListener('click', (e) => { e.stopPropagation(); emojiPicker.classList.toggle('hidden'); });
      document.addEventListener('click', (e) => { if (!emojiPicker.contains(e.target) && !emojiBtn.contains(e.target)) { emojiPicker.classList.add('hidden'); } });

      // --- All Files Modal Logic ---
      const filesModal = document.getElementById('files-modal');
      const openFilesModalBtn = document.getElementById('view-files-btn');
      const closeFilesModalBtn = document.getElementById('close-files-modal-btn');
      const modalFileList = document.getElementById('modal-file-list');
      openFilesModalBtn.addEventListener('click', () => filesModal.classList.remove('hidden'));
      closeFilesModalBtn.addEventListener('click', () => filesModal.classList.add('hidden'));
      filesModal.addEventListener('click', (e) => { if (e.target === filesModal) { filesModal.classList.add('hidden'); } });

      // --- ALL EXISTING CHAT LOGIC (WITH MODIFICATIONS FOR FILES & DELETE) ---
      const socket = io({ query: { userId: '<%= user.id %>', username: '<%= user.username %>' } });
      const room = 'group-<%= group.id %>';
      const currentUserId = '<%= user.id %>';
      const currentUsername = '<%= user.username %>';
      const currentUserRole = '<%= userRole %>';
      const messageContainer = document.getElementById('message-container');
      const messageForm = document.getElementById('message-form');
      const typingIndicator = document.getElementById('typing-indicator');
      const userList = document.getElementById('user-list');
      
      socket.emit('joinRoom', room);
      socket.on('updateUserList', (users) => { userList.innerHTML = users.map(user => `<li><i class="fas fa-circle text-green-500 text-xs mr-2"></i>${user}</li>`).join(''); });
      socket.on('chatMessage', (msg) => { appendMessage(msg); });
      socket.on('newFile', (file) => { addFileToModal(file); appendFileMessage(file); });
      socket.on('reactionAdded', ({ messageId, emoji }) => {
          const messageBubble = document.querySelector(`.message-bubble[data-message-id='${messageId}']`);
          if (messageBubble) {
            const reactionsContainer = messageBubble.querySelector('.reactions-container');
            const reactionEl = document.createElement('span');
            reactionEl.className = 'bg-gray-800 bg-opacity-50 text-xs px-2 py-1 rounded-full cursor-pointer';
            reactionEl.textContent = emoji;
            reactionsContainer.appendChild(reactionEl);
          }
      });
      
      // --- NEW: LISTENERS FOR DELETION ---
      socket.on('messageDeleted', (messageId) => {
          const messageEl = document.querySelector(`.message-bubble[data-message-id='${messageId}']`);
          if (messageEl) messageEl.remove();
      });
      socket.on('fileDeleted', ({ fileId, filepath }) => {
          const fileInModal = document.querySelector(`.file-item[data-file-id='${fileId}']`);
          if (fileInModal) fileInModal.remove();
          const fileInChat = document.querySelector(`.message-bubble[data-filepath='${filepath}']`);
          if (fileInChat) fileInChat.remove();
      });

      messageContainer.scrollTop = messageContainer.scrollHeight;
      let currentParentId = null;
      messageForm.addEventListener('submit', (e) => {
          e.preventDefault();
          const message = messageInput.value.trim();
          if (message) {
            socket.emit('chatMessage', { room, userId: currentUserId, username: currentUsername, message, parentId: currentParentId });
            messageInput.value = '';
            cancelReply();
          }
      });
      let typingTimeout;
      messageInput.addEventListener('input', () => {
          socket.emit('typing', { room, username: currentUsername });
          clearTimeout(typingTimeout);
      });
      socket.on('typing', ({ username }) => {
          typingIndicator.textContent = `${username} is typing...`;
          clearTimeout(typingTimeout);
          typingTimeout = setTimeout(() => typingIndicator.textContent = '', 3000);
      });
      const replyInfo = document.getElementById('reply-info');
      const replyUsernameEl = document.getElementById('reply-username');
      const replyMessageEl = document.getElementById('reply-message');
      messageContainer.addEventListener('click', (e) => {
          const replyBtn = e.target.closest('.reply-btn');
          if (replyBtn) {
            currentParentId = replyBtn.dataset.parentId;
            replyUsernameEl.textContent = replyBtn.dataset.parentUsername;
            replyMessageEl.textContent = replyBtn.dataset.parentMessage.substring(0, 50) + '...';
            replyInfo.classList.remove('hidden');
            messageInput.focus();
          }
          const reactBtn = e.target.closest('.react-btn');
          if (reactBtn) {
            const messageId = reactBtn.closest('.message-bubble').dataset.messageId;
            const emoji = prompt("React with an emoji:");
            if (emoji) {
              socket.emit('addReaction', { messageId, userId: currentUserId, emoji });
            }
          }
          // --- NEW: DELETE MESSAGE LOGIC ---
          const deleteBtn = e.target.closest('.delete-btn');
          if (deleteBtn) {
              const messageId = deleteBtn.dataset.messageId;
              if (confirm('Are you sure you want to delete this message?')) {
                  socket.emit('deleteMessage', { room, messageId });
              }
          }
      });
      // --- NEW: DELETE FILE LOGIC ---
      modalFileList.addEventListener('click', (e) => {
          const deleteBtn = e.target.closest('.delete-file-btn');
          if (deleteBtn) {
              const fileId = deleteBtn.dataset.fileId;
              const filepath = deleteBtn.dataset.filepath;
              if (confirm('Are you sure you want to delete this file?')) {
                  socket.emit('deleteFile', { room, fileId, filepath });
              }
          }
      });

      document.getElementById('cancel-reply').addEventListener('click', cancelReply);
      function cancelReply() {
          currentParentId = null;
          replyInfo.classList.add('hidden');
      }
      function appendMessage(msg) {
          const div = document.createElement('div');
          div.className = `message-bubble w-full flex ${msg.user_id == currentUserId ? 'justify-end' : 'justify-start'}`;
          div.dataset.messageId = msg.id;
          let replyHtml = '';
          if (msg.parent_message_id) {
            replyHtml = `<div class="border-l-2 border-blue-300 pl-2 text-xs opacity-80 mb-1 mt-1">
                            <strong>${msg.parent_username}</strong>: ${msg.parent_message.substring(0, 50)}...
                          </div>`;
          }
          let deleteBtnHtml = '';
          if (msg.user_id == currentUserId || ['owner', 'admin'].includes(currentUserRole)) {
              deleteBtnHtml = `<button class="delete-btn hover:text-red-400" data-message-id="${msg.id}"><i class="fas fa-trash"></i></button>`;
          }
          div.innerHTML = `
              <div class="max-w-md md:max-w-lg">
                <div class="rounded-xl px-4 py-2 ${msg.user_id == currentUserId ? 'bg-gradient-to-r from-blue-600 to-violet-600 text-white' : 'bg-gray-700 bg-opacity-50 text-gray-200'}">
                  <div class="font-bold text-sm">${msg.username}</div>
                  ${replyHtml}
                  <p class="text-base break-words mt-1">${msg.message}</p>
                  <div class="reactions-container flex gap-1 mt-2"></div>
                </div>
                <div class="flex items-center gap-2 mt-1 px-2 text-xs text-gray-500 ${msg.user_id == currentUserId ? 'justify-end' : ''}">
                  <span>${new Date(msg.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                  <button class="reply-btn hover:text-blue-400" data-parent-id="${msg.id}" data-parent-username="${msg.username}" data-parent-message="${msg.message}"><i class="fas fa-reply"></i></button>
                  <button class="react-btn hover:text-yellow-400"><i class="fas fa-smile"></i></button>
                  ${deleteBtnHtml}
                </div>
              </div>`;
          messageContainer.appendChild(div);
          messageContainer.scrollTop = messageContainer.scrollHeight;
      }
      function addFileToModal(file) {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'file-item p-3 rounded-lg bg-black bg-opacity-20 hover:bg-opacity-30 transition';
        fileDiv.dataset.fileId = file.id;
        let imagePreview = `<div class="w-full h-32 rounded-md mb-2 bg-gray-700 flex items-center justify-center"><i class="fas fa-file-alt text-4xl text-gray-500"></i></div>`;
        if (file.mimetype && file.mimetype.startsWith('image/')) {
            imagePreview = `<img src="${file.filepath}" alt="${file.filename}" class="w-full h-32 object-cover rounded-md mb-2">`;
        }
        let deleteBtnHtml = '';
        if (file.user_id == currentUserId || ['owner', 'admin'].includes(currentUserRole)) {
            deleteBtnHtml = `<button data-file-id="${file.id}" data-filepath="${file.filepath}" class="delete-file-btn text-red-500 hover:text-red-400 text-xs"><i class="fas fa-trash mr-1"></i> Delete</button>`;
        }
        fileDiv.innerHTML = `
            ${imagePreview}
            <a href="${file.filepath}" target="_blank" class="text-blue-400 hover:underline text-sm break-all font-medium">${file.filename}</a>
            <div class="flex justify-between items-center mt-2">
                <a href="${file.filepath.replace('/upload/', '/upload/fl_attachment/')}" class="text-green-400 hover:text-green-300 text-xs"><i class="fas fa-download mr-1"></i> Download</a>
                ${deleteBtnHtml}
            </div>
        `;
        modalFileList.appendChild(fileDiv);
      }
      function appendFileMessage(file) {
          const div = document.createElement('div');
          div.className = 'message-bubble w-full flex justify-center'; 
          div.dataset.filepath = file.filepath; // Important for finding and deleting later
          let filePreview = '';
          if (file.mimetype && file.mimetype.startsWith('image/')) {
            filePreview = `<img src="${file.filepath}" alt="${file.filename}" class="w-full h-auto rounded-lg mt-2 max-w-xs">`;
          }
          div.innerHTML = `
            <div class="max-w-md">
                <div class="rounded-xl px-4 py-3 bg-gray-800 text-gray-300 text-center">
                    <div class="font-semibold text-sm">New File Shared by <strong>${file.username}</strong></div>
                    <div class="text-base break-words mt-1 font-bold text-white">${file.filename}</div>
                    ${filePreview}
                    <div class="mt-3">
                        <a href="${file.filepath.replace('/upload/', '/upload/fl_attachment/')}" class="text-green-400 hover:text-green-300 text-sm font-semibold">
                            <i class="fas fa-download mr-1"></i> Download File
                        </a>
                    </div>
                </div>
            </div>`;
          messageContainer.appendChild(div);
          messageContainer.scrollTop = messageContainer.scrollHeight;
      }
    });
  </script>
</body>
</html>
